name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options: [patch, minor, major]

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}   # PAT or GITHUB_TOKEN with write

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Bump version (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        env:
          VERSION_TYPE: ${{ github.event.inputs.version_type }}
        run: |
          set -euo pipefail

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Make sure we have all tags locally
          git fetch --tags --force

          # Bump version *without* creating a tag yet
          npm version "$VERSION_TYPE" --no-git-tag-version

          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_ENV"

          # Commit bump
          git add package.json package-lock.json || true
          if ! git diff --cached --quiet; then
            git commit -m "chore: bump version to $NEW_VERSION"
          fi

          # Push the commit back to the current branch so the repo keeps the new version
          # (If your branch is protected, use a PAT with bypass perms or push to a PR branch.)
          CURRENT_BRANCH="${GITHUB_REF_NAME}"
          git pull --rebase origin "$CURRENT_BRANCH"
          git push origin "HEAD:$CURRENT_BRANCH"

          # Create tag if it doesn't already exist
          TAG="v$NEW_VERSION"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping tag creation."
          else
            git tag "$TAG"
            git push origin "$TAG"
          fi

      - name: Build and publish
        run: |
          npm run build
          npx electron-builder --mac --publish=always
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
