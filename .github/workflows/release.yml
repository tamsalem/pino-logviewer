name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Bump version (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        run: |
          npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore: bump version to $NEW_VERSION"
          git tag "v$NEW_VERSION"
          git push origin "v$NEW_VERSION"
          # Skipping pushing branch to avoid branch protection issues

      - name: Get version from tag
        if: github.event_name == 'push'
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV
          # Update package.json version to match tag
          npm version $VERSION --no-git-tag-version
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore: update version to $VERSION" || true
          # Skipping pushing branch to avoid branch protection issues

      - name: Build application
        run: |
          npm run build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          draft: false
          prerelease: false
          body: |
            ## Changes in v${{ env.NEW_VERSION }}
            
            ### Downloads
            - **DMG**: pino-logviewer_${{ env.NEW_VERSION }}.dmg (macOS installer)
            - **ZIP**: pino-logviewer_${{ env.NEW_VERSION }}.zip (macOS app bundle)
            
            ### Installation
            1. Download the DMG file
            2. Open the DMG and drag the app to your Applications folder
            3. Launch Pino LogViewer from your Applications folder
            
            ### File Associations
            This version supports opening .log and .txt files directly with the application.

      - name: Build and publish
        run: |
          npx electron-builder --mac --publish=always
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
